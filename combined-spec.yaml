openapi: 3.1.0
info:
  title: Analytics API
  version: 2.1.0
  description: |
    Analytics and reporting service for business intelligence.

    ## Authentication
    All endpoints require OAuth 2.0 authentication.

    ## Rate Limiting
    - 1000 requests per hour per client
    - 100 concurrent requests maximum
servers:
  - url: https://api.example.com/analytics-api
  - url: https://api-staging.example.com/analytics-api
paths:
  /reports:
    get:
      summary: List available reports
      security:
        - oauth2: [read]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        "200":
          description: List of reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Report"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/RateLimitExceeded"
  /reports/{id}:
    get:
      summary: Get report details
      security:
        - oauth2: [read]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Report details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    Report:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    RateLimitExceeded:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
        X-RateLimit-Remaining:
          schema:
            type: integer
        X-RateLimit-Reset:
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth/authorize
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            read: Read access to analytics
            write: Write access to analytics
---
openapi: 3.1.0
info:
  title: Customer API
  version: 1.0.0
  description: |
    **DEPRECATED**: This API version is deprecated. Please use v2.
    Shutdown date: 2024-12-31
servers:
  - url: https://api.example.com/v1/customer-api
paths:
  /customers:
    get:
      summary: List customers (DEPRECATED)
      deprecated: true
      responses:
        "200":
          description: List of customers
---
openapi: 3.1.0
info:
  title: Payment API
  version: 1.0.0 # ISSUE: Actual API is v2.0
  description: Payment processing service
servers:
  - url: https://api.example.com/payment-api
paths:
  /payments:
    post:
      summary: Process a payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                # ISSUE: Missing required card details that v2 needs
      responses:
        "200":
          description: Payment processed
        # ISSUE: No error responses defined
  /payments/{id}/refund:
    post:
      summary: Refund a payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Refund processed
security:
  - apiKey: [] # ISSUE: Using API key instead of OAuth2
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
---
openapi: 3.1.0
info:
  title: User API
  version: 1.0.0
  description: User management service
servers:
  - url: https://api.example.com/user-api
paths:
  /users:
    get:
      summary: List all users
      # ISSUE: No security defined - will fail OWASP linting
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created
  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        # ISSUE: Missing error responses - will fail OAS Recommended
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
  # ISSUE: No securitySchemes defined - will fail OWASP
